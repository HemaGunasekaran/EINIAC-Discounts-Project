# -*- coding: utf-8 -*-
"""Copy of Brands.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g_dnS6BHYFV12XJEs5uYyk-0Hmuv6QCA
"""

#importing pandas
import pandas as pd

#Loading CSVs

orders_csv_url = 'https://drive.google.com/file/d/14JDlhT4489rWz7ob9tDgyftKJl6FyfUB/view?usp=drive_link'
orders_path = 'https://drive.google.com/uc?export=download&id='+orders_csv_url.split('/')[-2]
orders_table = pd.read_csv(orders_path)

products_csv_url = 'https://drive.google.com/file/d/1lvJT7Gt3SyDgyknIR2aq0t2yUPJXoq1S/view?usp=sharing'
products_path = 'https://drive.google.com/uc?export=download&id='+products_csv_url.split('/')[-2]
products_table = pd.read_csv(products_path)

orderlines_csv_url = 'https://drive.google.com/file/d/14LI0ywaiOtNeYYTE5TMJ-axHey7mwNZi/view?usp=drive_link'
orderlines_path = 'https://drive.google.com/uc?export=download&id='+orderlines_csv_url.split('/')[-2]
orderlines_table = pd.read_csv(orderlines_path)

brands_csv_url = 'https://drive.google.com/file/d/1E9wg49tampe9Ipuiz_scGTdYSQ-Cy90s/view?usp=drive_link'
brands_path = 'https://drive.google.com/uc?export=download&id='+brands_csv_url.split('/')[-2]
brands_table = pd.read_csv(brands_path)

products_shortsku = products_table.copy()
products_shortsku["sku_short"] = products_shortsku["sku"].str[:3]
products_shortsku.head(10)

products_shortsku = products_shortsku.drop(columns=["Unnamed: 0"])

products_shortsku.head(10)

# merge brands and products_short_sku to later get the toal paid for each brand --> next step

products_brands = (
    products_shortsku
    .merge(brands_table, left_on = "sku_short", right_on = "short")
)

products_brands.head(10)

discounts_table = (
    orderlines_table[['sku', 'unit_price', 'date']]
    .merge(products_table[['sku', 'price']], on='sku', how='inner')
)

discounts_table['discount'] = discounts_table['price'] - discounts_table['unit_price']
discounts_table['discount_percent'] = (discounts_table['discount'] / discounts_table['price']) * 100

orders_merged_brands = discounts_table.merge(products_brands, on="sku", how="left")
orders_merged_brands.head(10)

def categorize_discount(discount):
    if discount == 0:
        return '0%'
    elif discount <= 10:
        return '1-10%'
    elif discount <= 20:
        return '11-20%'
    elif discount <= 30:
        return '21-30%'
    elif discount <= 40:
        return '31-40%'
    elif discount <= 50:
        return '41-50%'
    elif discount <= 60:
        return '51-60%'
    elif discount <= 70:
        return '61-70%'
    elif discount <= 80:
        return '71-80%'
    elif discount <= 90:
        return '81-90%'
    else:
        return '91-100%'
orders_merged_brands['discount_groups'] = discounts_table['discount_percent'].apply(categorize_discount)
grouped_discounts = pd.DataFrame(orders_merged_brands.groupby(['discount_groups','long'])['unit_price'].size()).reset_index()
#grouped_discounts.columns = ['discount_groups', 'long', 'quantity']
grouped_revenue = pd.DataFrame(orders_merged_brands.groupby(['discount_groups','long'])['unit_price'].sum()).reset_index()
grouped_discounts_top_5_items_sold = grouped_discounts.loc[grouped_discounts['long'].isin(['Apple', 'OWC', 'Pack', 'LaCie', 'LG']) ,:]
grouped_discounts_top_5_revenue= grouped_revenue.loc[grouped_revenue['long'].isin(['Apple', 'OWC', 'Pack', 'LaCie', 'LG']) ,:]
print(grouped_discounts_top_5_revenue)
print(grouped_discounts_top_5_items_sold)

import matplotlib.pyplot as plt
import seaborn as sns

# Set figure size
plt.figure(figsize=(12, 6))

# Plot for grouped_discounts_top_5_items_sold
plt.subplot(1, 2, 1)
sns.barplot(data=grouped_discounts_top_5_items_sold, x='discount_groups', y='unit_price', hue='long')
plt.title('Top 5 Brands - Items Sold Across Discount Groups')
plt.xlabel('Discount Groups')
plt.ylabel('Quantity Sold')
plt.xticks(rotation=45)
plt.legend(title='Brand')

# Plot for grouped_discounts_top_5_revenue
plt.subplot(1, 2, 2)
sns.barplot(data=grouped_discounts_top_5_revenue, x='discount_groups', y='unit_price', hue='long')
plt.title('Top 5 Brands - Revenue Across Discount Groups')
plt.xlabel('Discount Groups')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)
plt.legend(title='Brand')

# Adjust layout and show the plot
plt.tight_layout()
plt.show()

# Set figure size
plt.figure(figsize=(12, 6))

# Plot for grouped_discounts_top_5_items_sold
plt.subplot(1, 2, 1)
sns.barplot(data=grouped_discounts_top_5_items_sold, x='discount_groups', y='unit_price', hue='long')
plt.title('Top 5 Brands - Items Sold Across Discount Groups')
plt.xlabel('Discount Groups')
plt.ylabel('Quantity Sold')
plt.xticks(rotation=45)
plt.legend(title='Brand')

# Set figure size
plt.figure(figsize=(12, 6))
# Plot for grouped_discounts_top_5_revenue
plt.subplot(1, 2, 2)
sns.barplot(data=grouped_discounts_top_5_revenue, x='discount_groups', y='unit_price', hue='long')
plt.title('Top 5 Brands - Revenue Across Discount Groups')
plt.xlabel('Discount Groups')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)
plt.legend(title='Brand')

import matplotlib.pyplot as plt
import seaborn as sns

# Filter data for Apple only
apple_discounts = grouped_discounts_top_5_items_sold[grouped_discounts_top_5_items_sold['long'] == 'Apple']
apple_revenue = grouped_discounts_top_5_revenue[grouped_discounts_top_5_revenue['long'] == 'Apple']

# Set figure size
plt.figure(figsize=(12, 6))

# Plot for Apple - Items Sold Across Discount Groups
plt.subplot(1, 2, 1)
sns.barplot(data=apple_discounts, x='discount_groups', y='unit_price', color='#2E86C1', label='Apple')
plt.title('Apple - Items Sold Across Discount Groups')
plt.xlabel('Discount Groups')
plt.ylabel('Quantity Sold')
plt.xticks(rotation=45)
plt.legend()

# Plot for Apple - Revenue Across Discount Groups
plt.subplot(1, 2, 2)
sns.barplot(data=apple_revenue, x='discount_groups', y='unit_price', color='#2E86C1', label='Apple')
plt.title('Apple - Revenue Across Discount Groups')
plt.xlabel('Discount Groups')
plt.ylabel('Total Revenue')
plt.xticks(rotation=45)
plt.legend()

# Adjust layout and show the plot
plt.tight_layout()
plt.show()

orders_cleaned = orders_merged_brands[['sku', 'unit_price', 'date', 'short', 'long']]
orders_cleaned.head()

revenue_by_brand = (
    orders_cleaned.groupby('long')['unit_price']
    .sum()
    .reset_index()
    .rename(columns={'unit_price': 'total_revenue'})
)

revenue_by_brand = revenue_by_brand.sort_values(by='total_revenue', ascending=False)
print(revenue_by_brand.head(10))  # Top 10 brands by revenue

import matplotlib.pyplot as plt

plt.figure(figsize=(12,6))
plt.barh(revenue_by_brand['long'][:10], revenue_by_brand['total_revenue'][:10], color='skyblue')
plt.xlabel('Revenue (â‚¬)')
plt.ylabel('Brand')
plt.title('Top 10 Brands by Revenue')
plt.gca().invert_yaxis()  # Invert y-axis for best visual effect
plt.show()

# Group by brand and calculate the average discount percentage
avg_discount_by_brand = (
    orders_merged_brands
    .groupby('long')['discount_percent']
    .mean()
    .reset_index()
    .rename(columns={'discount_percent': 'avg_discount_percent'})
)

# Sorting by highest discount percentage
avg_discount_by_brand = avg_discount_by_brand.sort_values(by='avg_discount_percent', ascending=False)

# Display results
print(avg_discount_by_brand.tail(50))  # Show top 10 brands with highest avg discount
avg_discount_by_brand.loc[avg_discount_by_brand['long']=='Apple']

#Check the Impact of Discounts on Revenue
# Merge discount data with revenue data
discount_revenue_analysis = avg_discount_by_brand.merge(revenue_by_brand, on='long')

# Scatter plot to visualize correlation
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
sns.scatterplot(x='avg_discount_percent', y='total_revenue', data=discount_revenue_analysis)
plt.xlabel('Average Discount Percentage')
plt.ylabel('Total Revenue')
plt.title('Discount Percentage vs Revenue')
plt.show()

#Calculate Revenue Before and After Discounts
# Ensure 'date' is in datetime format
orders_merged_brands['date'] = pd.to_datetime(orders_merged_brands['date'])

# If 'quantity' column exists, multiply by quantity, otherwise assume 1 per order
if 'quantity' in orders_merged_brands.columns:
    orders_merged_brands['revenue_before_discount'] = orders_merged_brands['price_x'] * orders_merged_brands.get('quantity', 1)
    orders_merged_brands['revenue_after_discount'] = orders_merged_brands['unit_price'] * orders_merged_brands.get('quantity', 1)

else:
    orders_merged_brands['revenue_before_discount'] = orders_merged_brands['price_x']
    orders_merged_brands['revenue_after_discount'] = orders_merged_brands['unit_price']

# Summarize by brand
revenue_comparison = (
    orders_merged_brands.groupby('long')[['revenue_before_discount', 'revenue_after_discount']]
    .sum()
    .reset_index()
)

# Calculate revenue loss due to discount
revenue_comparison['discount_impact'] = revenue_comparison['revenue_before_discount'] - revenue_comparison['revenue_after_discount']

# Display results
print(revenue_comparison.head(10))  # Show top 10 brands

print((orders_merged_brands['price_x'] == orders_merged_brands['price_y']).all())

print(orders_merged_brands[['price_x', 'price_y', 'unit_price']].head(10))

# Drop price_y if it's the same as price_x
orders_merged_brands = orders_merged_brands.drop(columns=['price_y'])

# Calculate revenue before and after discounts
orders_merged_brands['revenue_before_discount'] = orders_merged_brands['price_x'] * orders_merged_brands.get('quantity', 1)
orders_merged_brands['revenue_after_discount'] = orders_merged_brands['unit_price'] * orders_merged_brands.get('quantity', 1)

# Summarize by brand
revenue_comparison = (
    orders_merged_brands.groupby('long')[['revenue_before_discount', 'revenue_after_discount']]
    .sum()
    .reset_index()
)

# Calculate revenue loss due to discount
revenue_comparison['discount_impact'] = revenue_comparison['revenue_before_discount'] - revenue_comparison['revenue_after_discount']

# Display results
print(revenue_comparison.head(10))  # Show top 10 brands

#Check the Overall Discount Impact
#Total revenue lost due to discounts:
#If this number is very high, discounts might be reducing revenue.
#If itâ€™s moderate, the increase in sales volume might compensate for the loss.
total_discount_impact = revenue_comparison['discount_impact'].sum()
print(f"Total revenue lost due to discounts: â‚¬{total_discount_impact:,.2f}")

#Identify Brands That Benefit vs. Suffer
#Brands with high revenue loss may suffer due to discounts.

#Brands where revenue_after_discount > revenue_before_discount (if any) benefit
revenue_comparison['discount_effect'] = revenue_comparison['discount_impact'].apply(lambda x: 'Negative' if x > 0 else 'Positive')
print(revenue_comparison.sort_values(by='discount_impact', ascending=False).head(10))  # Worst affected brands

#Analyze Revenue Trends Over Time
#Step 1: Convert date to month/quarter format
orders_merged_brands['month'] = orders_merged_brands['date'].dt.to_period('M')
orders_merged_brands['quarter'] = orders_merged_brands['date'].dt.to_period('Q')

#Step 2: Calculate Monthly Revenue Before & After Discounts
monthly_revenue = orders_merged_brands.groupby('month')[['revenue_before_discount', 'revenue_after_discount']].sum().reset_index()
print(monthly_revenue.head())

#Plot the Revenue Trends
import matplotlib.pyplot as plt

plt.figure(figsize=(12,6))
plt.plot(monthly_revenue['month'].astype(str), monthly_revenue['revenue_before_discount'], label="Before Discount", marker='o')
plt.plot(monthly_revenue['month'].astype(str), monthly_revenue['revenue_after_discount'], label="After Discount", marker='o')
plt.xticks(rotation=45)
plt.xlabel("Month")
plt.ylabel("Revenue (â‚¬)")
plt.title("Revenue Before and After Discounts Over Time")
plt.legend()
plt.show()

#Plot the Revenue Trends
import matplotlib.pyplot as plt

plt.figure(figsize=(12,6))
plt.plot(monthly_revenue['month'].astype(str), monthly_revenue['revenue_after_discount'], label="After Discount", marker='o')
plt.xticks(rotation=45)
plt.xlabel("Month")
plt.ylabel("Revenue (â‚¬)")
plt.title("Revenue After Discounts Over Time")
plt.legend()
plt.show()

import matplotlib.pyplot as plt

# Calculate total sales count by brand
sales_count_by_brand = orders_merged_brands.groupby('long').size().reset_index(name='sales_count')

# Merge sales count with revenue
brand_analysis = revenue_by_brand.merge(sales_count_by_brand, on='long')

# Calculate sales percentage
brand_analysis['sales_percentage'] = (brand_analysis['sales_count'] / brand_analysis['sales_count'].sum()) * 100

# Sort brands by sales count and revenue
brand_analysis = brand_analysis.sort_values(by='total_revenue', ascending=False)

# Identify top 5 brands
top_5_brands = brand_analysis.head(5)
top_5_sales_percentage = top_5_brands['sales_percentage'].sum()

# **1st Plot: Top 10 Brands by Revenue**
plt.figure(figsize=(12,6))
plt.barh(brand_analysis['long'][:10], brand_analysis['total_revenue'][:10], color='#2E86C1')  # Deep Blue
plt.xlabel('Revenue (â‚¬)')
plt.ylabel('Brand')
plt.title('Top 10 Brands by Revenue')
plt.gca().invert_yaxis()
plt.show()

# **2nd Plot: Sales Share of Top 5 Brands**
labels = ['Top 5 Brands', 'Other Brands']
sizes = [top_5_sales_percentage, 100 - top_5_sales_percentage]
colors = ['orange', '#2E86C1']
plt.figure(figsize=(8, 8))
plt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=colors, startangle=140)
plt.title('Top 5 Brands Share in Total Sales')
plt.show()

# **3rd Plot: Apple Discount Analysis**
apple_discount = avg_discount_by_brand[avg_discount_by_brand['long'] == 'Apple']['avg_discount_percent'].values[0]
top_5_discount = avg_discount_by_brand[avg_discount_by_brand['long'].isin(top_5_brands['long'])]

plt.figure(figsize=(10, 5))
plt.bar(top_5_discount['long'], top_5_discount['avg_discount_percent'], color='#2E86C1')
plt.axhline(y=apple_discount, color='red', linestyle='--', label=f'Apple: {apple_discount:.1f}%')
plt.xlabel('Brand')
plt.ylabel('Average Discount (%)')
plt.title('Discount Percentage of Top 5 Brands')
plt.legend()
plt.show()

